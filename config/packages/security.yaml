security:

    # Gestion de la sécurité du site

    # Déclaration de l'encodeur. On précise à Symfony que nous allons encoder un paramètre dans la classe/entity Utilisateur (password)
    # bcrypt est le type d'encodage utilisé dans l'entité Utilisateur (clé de hachage pour encoder les mots de passe en BDD)
    encoders:
        App\Entity\Utilisateur:
            algorithm: bcrypt


    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    # Les providers indiquent à Symfony où sont les données de l'utilisateur (dans quelles entités) et quelles propriétés on va contrôler
    providers:
        users_in_memory: { memory: null }

        #  "in_database" précise à Symfony que les données à contrôler sont en base de données, dans l'entité Utilisateur.
        # La propriété à contrôler est l'email.
        # Le mot de passe est contrôlé automatiquement dans la BDD.
        in_database:
            entity:
                class: App\Entity\Utilisateur
                property: email
        # used to reload user from session & other features (e.g. switch_user)
        

    # Les firewalls représentent les parties du site à protéger et les moyens utilisés pour le faire.
    # Pattern permet de conserver l'accès au bandeau Symfony en bas de page.
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        
        # On trouve ici tout le contenu du site à protéger
        main:

            # "Anonymous" indique quel utilisateur arrivant sur le site peut le visiter(si on l'enlève, le site est inaccessible).
            # anonymous: true
            anonymous: lazy

            # lazy: true

            # Les données stockées en BDD dans la table Utilisateur (le provider in_database est défini ci-dessus, ligne 20) seront protégées.
            provider: in_database

            # On indique à Symfony que le site est protégé par un système de formulaire de connexion (form_login)
            form_login:
                # login_path indique à Symfony sur quelle route se trouve le formulaire de connexion
                login_path: login

                # check_path indique à Symfony sur quelle route il doit contrôler les données saisies dans le formulaire de connexion
                check_path: login
 
            logout:
                # route de déconnexion
                path: logout
                
                # Une fois déconnecté, on est redirigé vers la page d'accueil (/home)
                target: home

    # role_hierarchy indique à Symfony que les internautes ayant un ROLE_ADMIN (rôle administrateur) ont aussi un ROLE_USER.
    # Ils ont donc accès à la totalité du site.
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER


    # access_control indique à Symfony à quelles parties les internautes ont accès.

    # { path: ^/admin, roles: ROLE_ADMIN } = On indique à Symfony que seuls les ROLE_ADMIN ont accès à cette route '/admin'.
    # Ceux qui ont accès à la route /admin sont les personnes ayant un Role Admin en BDD.

    # { path: ^/login, roles: ROLE_USER } = On indique à Symfony que seuls les ROLE_USER ont accès à cette route '/login'.

    # access_denied_url: /home = Si un utilisateur ayant un ROLE_USER tente d'accéder au Back Office, il est redirigé automatiquement vers la route '/home',
    # cad vers la page d'accueil.

    # Access_control indique à Symfony quel rôle utilisateur peut accéder au BackOffice (ROLE_ADMIN)
    # et quel rôle ont les utilisateurs qui se connectent (ROLE_USER).
    access_control:
        
        - { path: ^/admin, roles: ROLE_ADMIN }
        
        - { path: ^/login, roles: ROLE_USER }
    
    
    access_denied_url: /home